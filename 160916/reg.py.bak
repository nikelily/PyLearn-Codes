#正则

#\d数字
#\w字母或数字
#.匹配任意字符
#* 匹配变长字符
#+ 至少一个字符
#? 0个或1个字符
#{n} n个字符
#{n,m} n-m个字符
#\s 匹配一个空格(包括tab)
#- 与[]结合，在[-]里面从a-b范围,在[]-外面要加\-
#| 或者
#[]表示范围
#^ 表示行的开头
#$ 行的结束

'00\d'
'\d\d\d'
'\w\w\d' 
'py.'

'\d{3}\s+\d{3,8}'#匹配以任意个空格隔开的带区号的电话号码

'[0-9a-zA-Z\_]'#可以匹配一个数字、字母或者下划线
'[0-9a-zA-Z\_]+'#可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'
'^\d' #以数字开头



#由于 Python 的字符串本身也用\转义，所以要特别注意：
s = 'ABC\\-001' #python字符串
#对应的正则表达式串： 'ABC\-001'

#用Python 的 r 前缀，就不用考虑转义的问题了
str = r'ABC\-001' #python字符串
#对应的正则表达式串： 'ABC\-001'


import re
str2 = r'^\d{3}\-\d{3,8}$'
str3 = '010-12345'
print(re.match(str2,str3))
#match()方法判断是否匹配，如果匹配成功，返回一个 Match 对象，否则返回 None




#切分字符串
st = 'a b  c    d'
print(re.split(r'\s+',st))#无论多少个空格都可以正常分割

st2 = 'a,,,, b, , c , ,, , ,d'
print(re.split(r'[\s\,]+',st2))



#分组,提取子串，用()表示的就是要提取的分组（Group）
ss = '^(\d{3})-(\d{3,8})$'
m = re.match(ss,'012-341234')
print(m)
print(m.group(0))
print(m.group(1))
print(m.group(2))





#贪婪匹配,最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
res = re.match(r'^(\d+)(0*)$', '102300').groups()
print(res)
#由于\d+采用贪婪匹配，直接把后面的 0 全部匹配了，结果 0*只能匹配空字符串了。

#加个?就可以让\d+采用非贪婪匹配：
res2 = re.match(r'^(\d+?)(0*)$', '102300').groups()
print(res2)



#编译
#当我们在 Python 中使用正则表达式时，re 模块内部会干两件事情：
#1. 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
#2. 用编译后的正则表达式去匹配字符串。

#可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
f = r'^(\d{3})-(\d{3,8})$'
ree = re.compile(f)














